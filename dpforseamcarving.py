# -*- coding: utf-8 -*-
"""dpforseamcarving.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Otw7nxZ_pMTLDzdy3SixCUOhFsOhMaLN
"""

import numpy as np
from skimage import io, color, filters

def compute_energy(image):
    grayscale_image = color.rgb2gray(image)
    gradient = filters.sobel(grayscale_image)
    return gradient

def find_min_seam(energy_matrix):
    height, width = energy_matrix.shape
    dp_table = np.zeros_like(energy_matrix)

    # Initialize the dynamic programming table with the first row
    dp_table[0, :] = energy_matrix[0, :]

    # Fill the dynamic programming table
    for row in range(1, height):
        for col in range(width):
            left = dp_table[row - 1, col - 1] if col > 0 else np.inf
            up = dp_table[row - 1, col]
            right = dp_table[row - 1, col + 1] if col < width - 1 else np.inf

            dp_table[row, col] = energy_matrix[row, col] + min(left, up, right)

    # Identify the column index of the pixel with the minimum cumulative energy in the last row
    min_energy_col = np.argmin(dp_table[-1, :])

    # Trace back to find the minimum energy seam
    min_seam = [(height - 1, min_energy_col)]
    for row in range(height - 2, -1, -1):
        prev_col = min_seam[-1][1]
        candidates = [prev_col - 1, prev_col, prev_col + 1]
        valid_candidates = [c for c in candidates if 0 <= c < width]
        min_col = min(valid_candidates, key=lambda c: dp_table[row, c])
        min_seam.append((row, min_col))

    return min_seam

def carve_seams(image, num_seams):
    resized_image = np.copy(image)
    for _ in range(num_seams):
        energy_matrix = compute_energy(resized_image)
        min_seam = find_min_seam(energy_matrix)

        # Convert the tuple indices to integers
        min_seam = [(int(row), int(col)) for row, col in min_seam]

        resized_image = np.delete(resized_image, min_seam[0][0], axis=0)

    return resized_image

def main():
    # Load an example image
    image_path = '/content/drive/MyDrive/40+ Hilarious Photos Of Bizarre Things People Saw While Driving.jpg'
    image = io.imread(image_path)

    # Specify the number of seams to be removed
    num_seams_to_remove = 200

    # Carve the specified number of seams and display the resized image
    resized_image = carve_seams(image, num_seams_to_remove)
    io.imshow(resized_image)
    io.show()

if __name__ == "__main__":
    main()

from google.colab import drive
drive.mount('/content/drive')